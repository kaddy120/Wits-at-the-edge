// invite Users to A Group starts here
  async getUserByfName (firstName) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .query(sqlQueries.getUserByfName)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByfNameSurname (firstName, surname) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input('surname', sql.VarChar(50), surname)
        .query(sqlQueries.getUserByfNameSurname)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByfNameYOS (firstName, yearOfStudy) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input('yearOfStudy', sql.VarChar(50), yearOfStudy)
        .query(sqlQueries.getUserByfNameYOS)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByfNameSchool (firstName, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input('school', sql.VarChar(50), school)
        .query(sqlQueries.getUserByfNameSchool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByfNameSurnameYOS (firstName, surname, yearOfStudy) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input('surname', sql.VarChar(50), surname)
        .input(' yearOfStudy', sql.VarChar(50), yearOfStudy)
        .query(sqlQueries.getUserByfNameSurnameYOS)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByfNameSurnameSchool (firstName, surname, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input('surname', sql.VarChar(50), surname)
        .input(' school', sql.VarChar(50), school)
        .query(sqlQueries.getUserByfNameSurnameSchool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByfNameYosSchool (firstName, yearOfStudy, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input(' yearOfStudy', sql.VarChar(50), yearOfStudy)
        .input(' school', sql.VarChar(50), school)
        .query(sqlQueries.getUserByfNameYosSchool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByFullNameYOSschool (firstName, surname, yearOfStudy, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('firstName', sql.VarChar(50), firstName)
        .input('surname', sql.VarChar(50), surname)
        .input('yearOfStudy', sql.VarChar(50), yearOfStudy)
        .input('school', sql.VarChar(50), school)
        .query(sqlQueries.getUserByFullNameYOSschool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserBySurname (surname) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('surname', sql.VarChar(50), surname)
        .query(sqlQueries.getUserBySurname)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserBySurnameSchool (surname, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('surname', sql.VarChar(50), surname)
        .input('school', sql.VarChar(50), school)
        .query(sqlQueries.getUserBySurnameSchool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserBySurnameYOS (surname, yearOfStudy) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('surname', sql.VarChar(50), surname)
        .input('yearOfStudy)', sql.VarChar(50), yearOfStudy)
        .query(sqlQueries.getUserBySurnameYOS)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserBySurnameYosSchool (surname, yearOfStudy, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('surname', sql.VarChar(50), surname)
        .input('yearOfStudy)', sql.VarChar(50), yearOfStudy)
        .input('school', sql.VarChar(50), school)
        .query(sqlQueries.getUserBySurnameYosSchool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByYOS (yearOfStudy) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('yearOfStudy', sql.VarChar(50), yearOfStudy)
        .query(sqlQueries.getUserByYOS)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserByYOSschool (yearOfStudy, school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('yearOfStudy', sql.VarChar(50), yearOfStudy)
        .input('school', sql.VarChar(50), school)
        .query(sqlQueries.getUserByYOSschool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }

  async getUserBySchool (school) {
    try {
      const sqlQueries = await utils.loadSqlQueries('users')
      const pool = await this.pools
      const getUser = await pool.request()
        .input('school', sql.VarChar(50), school)
        .query(sqlQueries.getUserBySchool)
      return getUser.recordset
    } catch (err) {
      console.log(err)
    }
  }